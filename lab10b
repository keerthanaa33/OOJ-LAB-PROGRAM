class A {

    // Synchronized method in class A
    synchronized void foo(B b) {
        String name = Thread.currentThread().getName();
        System.out.println(name + " entered A.foo");

        try {
            Thread.sleep(1000); // Simulate some work
        } catch (Exception e) {
            System.out.println("A Interrupted");
        }

        System.out.println(name + " trying to call B.last()");
        b.last();
    }

    // Non-synchronized method in class A
    void last() {
        System.out.println("Inside A.last");
    }
}

class B {

    // Synchronized method in class B
    synchronized void bar(A a) {
        String name = Thread.currentThread().getName();
        System.out.println(name + " entered B.bar");

        try {
            Thread.sleep(1000); // Simulate some work
        } catch (Exception e) {
            System.out.println("B Interrupted");
        }

        System.out.println(name + " trying to call A.last()");
        a.last();
    }

    // Non-synchronized method in class B
    void last() {
        System.out.println("Inside B.last");
    }
}

class Deadlock implements Runnable {

    A a = new A();
    B b = new B();

    Deadlock() {
        // Set the name for the main thread
        Thread.currentThread().setName("MainThread");

        // Create and start a new thread
        Thread t = new Thread(this, "RacingThread");
        t.start();

        // Main thread calls A.foo and locks object 'a'
        a.foo(b); 
        System.out.println("Back in main thread");
    }

    public void run() {
        // RacingThread calls B.bar and locks object 'b'
        b.bar(a);
        System.out.println("Back in other thread");
    }

    public static void main(String[] args) {
        System.out.println("Keerthana H Bhat: 1BM23CS148");
        new Deadlock(); // Trigger the deadlock scenario
    }
}
